name: Release workflow

on:
  # Trigger the workflow only manually
  workflow_dispatch:

env:
  GHR_PROJECT_REPONAME: ui5-language-assistant-vk
  GHR_PROJECT_USERNAME: vadson71

jobs:
  release:
    if: github.repository == 'vadson71/ui5-language-assistant-vk' && github.ref == 'refs/heads/master' 
    runs-on: [ubuntu-latest]
    needs: version
    steps:
      - name: Setup Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
      - name: 'prepare to deploy'
        run:
          go version

      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: Run build
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: build:quick # will run `yarn run ci` command

      # - name: Upload vsix artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: vscode-extension-file
      #     path: ./packages/vscode-ui5-language-assistant/vscode-ui5-language-assistant*.vsix
      #     if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
      # - name: Setup node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 14

      # Download vsix artifact
      - name: 'make folder'
        run: mkdir ./artifacts
      - name: Download artifact
        run: echo "Test" >> ./artifacts/test.txt
      - name: 'check artifacts'
        run: ls ./artifacts -la

     # Get new version number
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: ./packages/vscode-ui5-language-assistant


      # Publish on GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_PAT }} # A personal access token
        with:
          tag_name: v${{ steps.package-version.outputs.current-version}}
          release_name: Release v${{ steps.package-version.outputs.current-version}}
          draft: false
          prerelease: false
          owner: ${{env.GHR_PROJECT_USERNAME}}
          repo: ${{env.GHR_PROJECT_REPONAME}}

      # # Publish on GitHub
      # - name: 'Publish Release on GitHub'
      #   # run: echo 'export GOPATH=~/go' >> $BASH_ENV
      #   run: go install github.com/tcnksm/ghr@latest

      # - name: Check
      #   # run: echo ${{ secrets.GITHUB_TOKEN }} -u ${{env.GHR_PROJECT_USERNAME}} -r ${{env.GHR_PROJECT_REPONAME}} -replace ${{ needs.build.outputs.current-version}} ./artifacts/
      #   run: ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${{env.GHR_PROJECT_USERNAME}} -r ${{env.GHR_PROJECT_REPONAME}} -replace ${{ needs.build.outputs.current-version}} ./artifacts/

 

      
