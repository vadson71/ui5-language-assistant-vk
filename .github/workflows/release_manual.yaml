name: Release workflow

on:
  # Trigger the workflow only manually
  workflow_dispatch:
      inputs:
        jobName:
          description: 'Action'
            required: true
            type: choice
            default: 'version'
            options:
            - version
            - release
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]  # TODO: run for all versions
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0    # will fetch all history
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # if needed
      - name: Run build
        uses: borales/actions-yarn@v4
        with:
          cmd: run build:quick # will run `yarn run ci` command
        #
      - name: Upload vsix artifact
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension-file
          path: ./packages/vscode-ui5-language-assistant/vscode-ui5-language-assistant*.vsix
 version:
        # Run version job only on pushes to the main branch. The job depends on completion of the build job.
        if: inputs.jobName == 'version' && github.ref == 'refs/heads/master'
        runs-on: ubuntu-latest
        needs: build
        outputs:
            changes: ${{ steps.changesetVersion.outputs.changes }} # map step output to job output
        steps:
            - name: Checkout code repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  token: ${{ secrets.ACCESS_PAT }}
            - name: Setup node
              uses: actions/setup-node@v3
              with:
                node-version: 14
            # TODO: cache node modules
            - name: Run install
              uses: borales/actions-yarn@v4
              with:
                cmd: install # will run `yarn install` command
            - name: Apply changesets
              id: changesetVersion
              run: |
                  echo ::set-output name=changes::$(npm run ci:version 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
                  git status
            - name: Output
              run: echo ${{steps.changesetVersion.outputs.changes == 'true'}}
            # - name: Commit and push changes
            #   if: steps.changesetVersion.outputs.changes == 'true'
            #   run: |
            #       git config user.name github-actions
            #       git config user.email github-actions@github.com
            #       git status
            #       git add -A
            #       git status
            #       git commit -m "chore: apply latest changesets" --no-verify || echo "No changesets found"
            #       git log --pretty=oneline | head -n 10
            #       git push